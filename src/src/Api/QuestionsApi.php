<?php

namespace App\Api;

use App\Entity\Question as EntityQuestion;
use App\Repository\QuestionRepository;
use OpenAPI\Server\Api\QuestionsApiInterface;
use OpenAPI\Server\Model\Question;
use OpenAPI\Server\Model\QuestionRequest;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class QuestionsApi implements QuestionsApiInterface // An interface is autogenerated
{
  protected QuestionRepository $questionRepository;

  public function __construct(QuestionRepository $questionRepository)
  {
    $this->questionRepository = $questionRepository;
  }

  public function createQuestion(QuestionRequest $questionRequest, &$responseCode, array &$responseHeaders) {

    $eq = new EntityQuestion();

    $eq->setText($questionRequest->getText());

    $eq = $this->questionRepository->save($eq);

    $q = new Question($eq->toArray());
    return $q;
  }

  public function deleteQuestion($id, &$responseCode, array &$responseHeaders){
    $qe = $this->questionRepository->find($id);
    if($qe == null) {
      $responseCode = 404;
      return null;
    }

    $this->questionRepository->remove($qe);
    return null;
  }

  public function getQuestion($id, &$responseCode, array &$responseHeaders) {

    $qe = $this->questionRepository->find($id);
    if($qe == null) {
      $responseCode = 404;
      return null;
    }
    return new Question($qe->toArray());
  }

  public function getQuestions(&$responseCode, array &$responseHeaders) {

    $rows = $this->questionRepository->findAll();

    $rtn = [];
    foreach($rows as $row) {
      $rtn[] = new Question($row->toArray());
    }

    return $rtn;
  }

  public function getRandomQuestion(&$responseCode, array &$responseHeaders) {

    $qe = $this->questionRepository->findRandom();
    if($qe == null) {
      $responseCode = 404;
      return null;
    }
    return new Question($qe->toArray());
  }

  public function updateQuestion($id, QuestionRequest $questionRequest, &$responseCode, array &$responseHeaders) {
    $qe = $this->questionRepository->find($id);
    if($qe == null) {
      $responseCode = 404;
      return null;
    }

    $qe->setText($questionRequest->getText());
    $this->questionRepository->save($qe);

    return new Question($qe->toArray());
  }
}
